{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","about","contacts","className","this","class","id","onClick","setState","href","target","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOA+DeA,E,YAtCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,OAAO,EACPC,UAAU,GAJK,E,sEAQT,IAAD,OAEP,OACE,yBAAKC,UAAY,QAAWC,KAAKJ,MAAMC,OAASG,KAAKJ,MAAME,SAAY,wBAA0B,wBAC/F,4BAAQG,MAAM,cACZ,yBAAKC,GAAG,sBAAsBC,QAAS,WAAiB,EAlC7DC,SAAS,CACVP,OAAO,EACPC,UAAU,MAgCJ,uBACmB,6BACjB,0BAAMI,GAAG,WAAT,4CAEF,yBAAKA,GAAG,wBACN,yBAAKH,UAAY,gBAAmBC,KAAKJ,MAAMC,MAAQ,WAAa,IAAOM,QAAS,WAAkB,EAhC7GC,SAAS,CACVP,OAAO,EACPC,UAAU,MA8B2G,0BAAMG,MAAM,UAAZ,QAA7G,SACA,uBAAGI,KAAK,+BAA+BC,OAAO,SAASL,MAAM,eAAc,0BAAMA,MAAM,UAAZ,QAA3E,aACA,yBAAKF,UAAY,gBAAmBC,KAAKJ,MAAME,SAAW,WAAa,IAAOK,QAAS,WAAqB,EA3BnHC,SAAS,CACVP,OAAO,EACPC,UAAU,MAyBiH,0BAAMG,MAAM,UAAZ,QAAnH,aAEAD,KAAKJ,MAAMC,MAAQ,yBAAKK,GAAG,SAAR,gsBAMZ,GACPF,KAAKJ,MAAME,SAAW,yBAAKI,GAAG,SAAR,gCACK,6BADL,eAEf,S,GAhCDK,IAAMC,WCZJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8f4d156e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction selectHome(ob) {\n  ob.setState({\n    about: false,\n    contacts: false\n  })\n}\n\nfunction selectAbout(ob) {\n  ob.setState({\n    about: true,\n    contacts: false\n  });\n}\n\nfunction selectContacts(ob) {\n  ob.setState({\n    about: false,\n    contacts: true\n  });\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      about: false,\n      contacts: false\n    };\n  }\n\n  render() {\n    let about = false;\n    return (\n      <div className={ \"App \" + ((this.state.about || this.state.contacts) ? \"App-background-notext\" : \"App-background-text\") }>\n        <header class=\"App-header\">\n          <div id=\"Desktop-header-left\" onClick={() => selectHome(this)}>\n            I'm Paulo Osório!<br/>\n            <span id=\"details\">Graphic Designer - UI/UX - Illustration</span>\n          </div>\n          <div id=\"Desktop-header-right\">\n            <div className={ \"Header-item \" + ( this.state.about ? \"selected\" : \"\" ) } onClick={() => selectAbout(this)}><span class=\"number\">01. </span>About</div>\n            <a href=\"./static/media/portfolio.pdf\" target=\"_blank\" class=\"Header-item\"><span class=\"number\">02. </span>Portfolio</a>\n            <div className={ \"Header-item \" + ( this.state.contacts ? \"selected\" : \"\" ) } onClick={() => selectContacts(this)}><span class=\"number\">03. </span>Contacts</div>\n          </div>\n          { this.state.about ? <div id=\"About\">\n          Hi, I created this portfolio so you can see what I have been doing for the last 3 years. I worked in different environments so one of my skills is adaptation, yes I can adapt to the work flow easily. \n          In this portfolio you’ll see a variety sets of skills, you’ll see projects that come to life, like an ortopedic company, a metal/laser company, an \n          health/outdoor sport app, a pet accessories brand and a few more things. \n          I tried to create a design that shows the brand intention and philosophy because I like to create stuff that makes people feel that was created for them.\n          This is my portfolio, it’s a work in progress, because there is always something that can be improved or added.\n          </div> : \"\" }\n          { this.state.contacts ? <div id=\"About\">\n          pauloosorio.almeida@gmail.com<br/>918 719 554\n          </div> : \"\" }\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}